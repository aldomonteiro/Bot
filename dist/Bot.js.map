{"version":3,"sources":["../src/Bot.js"],"names":["time","setTimeout","resolve","wait","Elements","Buttons","QuickReplies","userCache","Bot","verification","debug","_debug","_verification","_fields","axios","delete","_token","headers","params","fields","response","result","data","error","message","status","statusText","get","to","console","log","recipient","id","toJSON","method","json","query","access_token","body","text","err","JSON","parse","type","ee","Error","senderAction","sender_action","isTyping","setTyping","cache","key","props","fromCache","input","entry","messaging","standby","raw","sender","fetch","fetchUser","postback","isButton","postbackPayload","payload","hasOwnProperty","event","emit","e","read","delivery","mids","optin","param","ref","quick_reply","is_echo","isQuickReply","attachments","_","groupBy","image","images","map","a","url","video","videos","audio","location","coordinates","object","router","Router","use","bodyParser","req","res","send","post","token","handleMessage","length","messaging_type","tag","EventEmitter"],"mappings":"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","file":"Bot.js","sourcesContent":["import EventEmitter from 'events';\nimport bodyParser from 'body-parser';\nimport { Router } from 'express';\nimport Elements from './Elements.js';\nimport Buttons from './Buttons.js';\nimport QuickReplies from './QuickReplies.js';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport fetch from './libs/fetch';\n\nexport { Elements, Buttons, QuickReplies };\n\nconst userCache = {};\n\nexport async function wait(time) {\n  return new Promise(resolve => setTimeout(() => resolve(), time));\n}\n\nclass Bot extends EventEmitter {\n  static Buttons = Buttons;\n  static Elements = Elements;\n\n  static wait = wait;\n\n  constructor(verification, debug) {\n    super();\n    this._debug = debug;\n    this._verification = verification;\n  }\n\n  async deleteFields(_fields) {\n    try {\n      const response = await axios.delete('https://graph.facebook.com/v2.6/me/messenger_profile?access_token=' + this._token, {\n        headers: { 'Content-Type': 'application/json' },\n        params: {\n          fields: _fields\n        },\n      });\n      return response.result;\n    }\n    catch (error) {\n      if (error.response && error.response.data && error.response.data.error)\n        return error.response.data.error.message;\n      else if (error.response.status && error.response.statusText)\n        return error.response.status + ' - ' + error.response.statusText;\n      else return \"unknown error\";\n    }\n  }\n\n  async getFields(_fields) {\n    try {\n      const response = await axios.get('https://graph.facebook.com/v2.6/me/messenger_profile?access_token=' + this._token, {\n        headers: { 'Content-Type': 'application/json' },\n        params: {\n          fields: JSON.stringify(_fields),\n        },\n      });\n      if (response.data) return response.data;\n      else if (response.result) return response.result;\n      else return response;\n    }\n    catch (error) {\n      if (error.response && error.response.data && error.response.data.error)\n        return error.response.data.error.message;\n      else if (error.response && error.response.status && error.response.statusText)\n        return error.response.status + ' - ' + error.response.statusText;\n      else return \"unknown error\";\n    }\n  }\n\n  async send(to, message) {\n    if (this._debug) {\n      console.log({ recipient: { id: to }, message: message ? message.toJSON() : message });\n    }\n\n    try {\n      await fetch('https://graph.facebook.com/v2.6/me/messages', {\n        method: 'post',\n        json: true,\n        query: { access_token: this._token },\n        body: { recipient: { id: to }, message }\n      });\n    } catch (e) {\n      if (e.text) {\n        let text = e.text;\n        try {\n          const err = JSON.parse(e.text).error;\n          text = `${err.type || 'Unknown'}: ${err.message || 'No message'}`;\n        } catch (ee) {\n          // ignore\n        }\n\n        throw Error(text);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async senderAction(to, senderAction) {\n    if (this._debug) {\n      console.log({ recipient: { id: to }, senderAction });\n    }\n\n    try {\n      await fetch('https://graph.facebook.com/v2.6/me/messages', {\n        method: 'post',\n        json: true,\n        query: { access_token: this._token },\n        body: { recipient: { id: to }, sender_action: senderAction }\n      });\n    } catch (e) {\n      if (e.text) {\n        let text = e.text;\n        try {\n          const err = JSON.parse(e.text).error;\n          text = `${err.type || 'Unknown'}: ${err.message || 'No message'}`;\n        } catch (ee) {\n          // ignore\n        }\n\n        throw Error(text);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async setTyping(to, isTyping) {\n    const senderAction = isTyping ? 'typing_on' : 'typing_off';\n    this.senderAction(to, senderAction);\n  }\n\n  async startTyping(to) {\n    try {\n      this.setTyping(to, true);\n    } catch (error) {\n      console.error('startTyping error: ', error.message);\n    }\n\n  }\n\n  async stopTyping(to) {\n    this.setTyping(to, false);\n  }\n\n  async fetchUser(id, fields = 'first_name,last_name,profile_pic', cache = false) {\n    const key = id + fields;\n    let props;\n\n    if (cache && userCache[key]) {\n      props = userCache[key];\n      props.fromCache = true;\n    } else {\n      const { body } = await fetch(`https://graph.facebook.com/v2.6/${id}`, {\n        query: { access_token: this._token, fields }, json: true\n      });\n\n      props = body;\n      props.fromCache = false;\n\n      if (cache) {\n        userCache[key] = props;\n      }\n    }\n\n    return props;\n  }\n\n  async handleMessage(input) {\n    const body = JSON.parse(JSON.stringify(input));\n\n    // Get messaging if existis, otherwise gets standby\n    const message = body.entry[0].messaging\n      ? body.entry[0].messaging[0]\n      : body.entry[0].standby ? body.entry[0].standby[0] : null;\n\n    message.raw = input;\n\n    if (message.message) {\n      Object.assign(message, message.message);\n      delete message.message;\n    }\n\n    message.sender.fetch = async (fields, cache) => {\n      const props = await this.fetchUser(message.sender.id, fields, cache);\n      Object.assign(message.sender, props);\n      return message.sender;\n    };\n\n    // POSTBACK\n    if (message.postback) {\n      message.isButton = true;\n\n      let postbackPayload = {};\n\n      try {\n        postbackPayload = JSON.parse(message.postback.payload);\n        if (postbackPayload.hasOwnProperty('data')) {\n          message.postback = postbackPayload;\n          message.data = postbackPayload.data;\n          message.event = postbackPayload.event;\n          this.emit('postback', message.event, message, message.data);\n\n          if (postbackPayload.hasOwnProperty('event')) {\n            this.emit(message.event, message, message.data);\n          }\n        }\n      } catch (e) {\n        console.log('ERROR parsing postback.payload', postbackPayload, e);\n        this.emit(message.postback.payload, message);\n      }\n      return;\n    }\n\n    // READ\n    if (message.read) {\n      this.emit('read', message, message.read);\n      return;\n    }\n\n    // DELIVERY\n    if (message.delivery) {\n      Object.assign(message, message.delivery);\n      message.delivery = message.delivery.mids;\n\n      delete message.delivery.mids;\n\n      this.emit('delivery', message, message.delivery);\n      return;\n    }\n\n    // OPTIN\n    if (message.optin) {\n      message.param = message.optin.ref || true;\n      message.optin = message.param;\n      this.emit('optin', message, message.optin);\n      return;\n    }\n\n    // QUICK_REPLY\n    if (message.quick_reply && !message.is_echo) {\n      let postback = {};\n\n      try {\n        postback = JSON.parse(message.quick_reply.payload) || {};\n      } catch (e) {\n        // ignore\n      }\n\n      message.isQuickReply = true;\n\n      if (postback.hasOwnProperty('data')) {\n        message.postback = postback;\n        message.data = postback.data;\n        message.event = postback.event;\n\n        this.emit('postback', message.event, message, message.data);\n\n        if (postback.hasOwnProperty('event')) {\n          this.emit(message.event, message, message.data);\n        }\n      } else {\n        this.emit('quick-reply', message, message.quick_reply);\n      }\n\n      return;\n    }\n\n    const attachments = _.groupBy(message.attachments, 'type');\n\n    if (attachments.image) {\n      message.images = attachments.image.map(a => a.payload.url);\n    }\n\n    if (attachments.video) {\n      message.videos = attachments.video.map(a => a.payload.url);\n    }\n\n    if (attachments.audio) {\n      message.audio = attachments.audio.map(a => a.payload.url)[0];\n    }\n\n    if (attachments.location) {\n      const location = attachments.location[0];\n      message.location = { ...location, ...location.payload.coordinates };\n      delete message.location.payload;\n    }\n\n    message.object = body.object;\n\n    delete message.attachments;\n\n    if (this._debug)\n      console.log('this.emit message', message);\n\n    this.emit('message', message);\n  }\n\n  router() {\n    const router = new Router();\n\n    router.use(bodyParser.json());\n\n    router.get('/', (req, res) => {\n      if (req.query['hub.verify_token'] === this._verification) {\n        res.send(req.query['hub.challenge']);\n      } else {\n        res.send('Error, wrong validation token');\n      }\n    });\n\n    router.post('/', (req, res) => {\n      this._token = req.token;\n      if (req.body) {\n        this.handleMessage(req.body);\n        if (this._debug) {\n          console.log(\"bot router (req.body.entry[0])\");\n          console.log((req.body.entry && req.body.entry.length > 0) ? req.body.entry[0] : \"received something, no body entry..\");\n        }\n      }\n      res.send().status(200);\n    });\n\n    return router;\n  }\n\n  static async send_message_tag(token, to, message) {\n    try {\n      await fetch('https://graph.facebook.com/v2.6/me/messages', {\n        method: 'post',\n        json: true,\n        query: { access_token: token },\n        body: {\n          recipient: { id: to },\n          message,\n          messaging_type: 'MESSAGE_TAG',\n          tag: 'SHIPPING_UPDATE'\n        }\n      });\n    } catch (e) {\n      if (e.text) {\n        let text = e.text;\n        try {\n          const err = JSON.parse(e.text).error;\n          text = `${err.type || 'Unknown'}: ${err.message || 'No message'}`;\n        } catch (ee) {\n          // ignore\n        }\n\n        throw Error(text);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n\n}\n\nexport { Bot };\n\nexport default Bot;\n"]}