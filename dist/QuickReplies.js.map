{"version":3,"sources":["../src/QuickReplies.js"],"names":["QuickReplies","_quickReplies","text","data","event","isLocation","isPhoneNumber","Error","push","quickReplies","reply","contentType","payload","content_type","title","String","length","array","quickreplies","forEach","add","arg"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;IAEMA,Y;AACJ,0BAAc;AAAA;;AACZ,SAAKC,aAAL,GAAqB,EAArB;AACD;;;;8BAEqD;AAAA,UAAhDC,IAAgD,QAAhDA,IAAgD;AAAA,UAA1CC,IAA0C,QAA1CA,IAA0C;AAAA,UAApCC,KAAoC,QAApCA,KAAoC;AAAA,UAA7BC,UAA6B,QAA7BA,UAA6B;AAAA,UAAjBC,aAAiB,QAAjBA,aAAiB;;AACpD,UAAI,CAACH,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACC,UAApB,IAAkC,CAACC,aAAvC,EAAsD;AACpD,cAAMC,MAAM,iFAAN,CAAN;AACD;;AAED,WAAKN,aAAL,CAAmBO,IAAnB,CAAwB,EAAEN,MAAMA,QAAQ,YAAhB,EAA8BE,YAA9B,EAAqCD,UAArC,EAA2CE,sBAA3C,EAAuDC,4BAAvD,EAAxB;AACA,aAAO,IAAP;AACD;;;6BAEQ;AACP,UAAMG,eAAe,EAArB;AADO;AAAA;AAAA;;AAAA;AAEP,wDAAoB,KAAKR,aAAzB,4GAAwC;AAAA,cAA7BS,KAA6B;;AACtC,cAAIC,cAAc,MAAlB;AACA,cAAMC,UAAU,yBAAe,EAAET,MAAMO,MAAMP,IAAd,EAAoBC,OAAOM,MAAMN,KAAjC,EAAf,CAAhB;AACA,cAAI,CAACM,MAAMR,IAAX,EAAiB;AACf,kBAAM,IAAIK,KAAJ,CAAU,mBAAV,CAAN;AACD;AACD,cAAIG,MAAML,UAAV,EAAsB;AACpBM,0BAAc,UAAd;AACD;AACD,cAAID,MAAMJ,aAAV,EAAyB;AACvBK,0BAAc,mBAAd;AACAF,yBAAaD,IAAb,CAAkB,EAAEI,gBAAF,EAAWC,cAAcF,WAAzB,EAAlB;AACD,WAHD,MAGO;AACLF,yBAAaD,IAAb,CAAkB,EAAEI,gBAAF,EAAWE,OAAO,gBAAIC,OAAOL,MAAMR,IAAb,CAAJ,EAAwB,EAAxB,CAAlB,EAA+CW,cAAcF,WAA7D,EAAlB;AACD;AACF;AAjBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBP,aAAOF,YAAP;AACD;;;wBAQY;AACX,aAAO,KAAKR,aAAL,CAAmBe,MAA1B;AACD;;;yBARWC,K,EAAO;AACjB,UAAMC,eAAe,IAAIlB,YAAJ,EAArB;AACAiB,YAAME,OAAN,CAAc;AAAA,eAAOD,aAAaE,GAAb,CAAiBC,GAAjB,CAAP;AAAA,OAAd;AACA,aAAOH,YAAP;AACD;;;;;kBAOYlB,Y","file":"QuickReplies.js","sourcesContent":["import { cut } from './libs/utils';\n\nclass QuickReplies {\n  constructor() {\n    this._quickReplies = [];\n  }\n\n  add({ text, data, event, isLocation, isPhoneNumber }) {\n    if (!data && !event && !isLocation && !isPhoneNumber) {\n      throw Error('Must provide a url or data i.e. {data: null} or {url: \\'https://facebook.com\\'}');\n    }\n\n    this._quickReplies.push({ text: text || 'QuickReply', event, data, isLocation, isPhoneNumber });\n    return this;\n  }\n\n  toJSON() {\n    const quickReplies = [];\n    for (const reply of this._quickReplies) {\n      let contentType = 'text';\n      const payload = JSON.stringify({ data: reply.data, event: reply.event });\n      if (!reply.text) {\n        throw new Error('No text attribute');\n      }\n      if (reply.isLocation) {\n        contentType = 'location';\n      }\n      if (reply.isPhoneNumber) {\n        contentType = 'user_phone_number';\n        quickReplies.push({ payload, content_type: contentType });\n      } else {\n        quickReplies.push({ payload, title: cut(String(reply.text), 20), content_type: contentType });\n      }\n    }\n\n    return quickReplies;\n  }\n\n  static from(array) {\n    const quickreplies = new QuickReplies();\n    array.forEach(arg => quickreplies.add(arg));\n    return quickreplies;\n  }\n\n  get length() {\n    return this._quickReplies.length;\n  }\n}\n\nexport default QuickReplies;\n"]}